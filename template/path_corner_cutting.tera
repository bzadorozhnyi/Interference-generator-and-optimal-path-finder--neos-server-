param rows integer > 0;
param cols integer > 0;

set ROWS := 1..rows;
set COLS := 1..cols;

set NODES := {ROWS, COLS};
set DISABLED_NODES within NODES default {};

param start{1..2} integer;
param finish{1..2} integer;

param alpha default 1;

set DIR := 1..8;
param DR{DIR};
param DC{DIR};

var x{r in ROWS, c in COLS, nr in ROWS, nc in COLS} binary;
var y{r in ROWS, c in COLS, d in DIR} binary;
var z{r in ROWS, c in COLS, d1 in DIR, d2 in DIR} binary;

param found;
param USED_NODES {NODES} binary default 0;
param ks default 1;
param Ns default 10;

minimize total_cost:
    sum{r in ROWS, c in COLS, nr in ROWS, nc in COLS:
        abs(r-nr)<=1 and abs(c-nc)<=1
        and (r,c) not in DISABLED_NODES and (nr,nc) not in DISABLED_NODES} x[r,c,nr,nc]
    + alpha * sum{r in ROWS, c in COLS, d1 in DIR, d2 in DIR: d1 != d2} z[r,c,d1,d2];

subject to flow_balance {r in ROWS, c in COLS: (r,c) not in DISABLED_NODES}:
    sum{nr in ROWS, nc in COLS: abs(r-nr)<=1 and abs(c-nc)<=1} (x[r,c,nr,nc] - x[nr,nc,r,c]) =
        if (r = start[1] and c = start[2]) then 1
        else if (r = finish[1] and c = finish[2]) then -1
        else 0;

subject to disable_illegal_arcs {
  r in ROWS, c in COLS, nr in ROWS, nc in COLS :
    abs(r - nr) <= 1 and abs(c - nc) <= 1
}:
  if ( (r,c) in DISABLED_NODES or (nr,nc) in DISABLED_NODES ) then
    x[r,c,nr,nc] = 0;

subject to define_y_from_x {
  r in ROWS, c in COLS, d in DIR:
    r + DR[d] in ROWS and c + DC[d] in COLS
    and (r,c) not in DISABLED_NODES
    and (r + DR[d], c + DC[d]) not in DISABLED_NODES
}:
  y[r,c,d] = x[r,c, r + DR[d], c + DC[d]];

subject to define_z_turns {
  r in ROWS, c in COLS, d1 in DIR, d2 in DIR:
    d1 != d2
    and r - DR[d1] in ROWS and c - DC[d1] in COLS
    and (r,c) not in DISABLED_NODES
    and (r - DR[d1], c - DC[d1]) not in DISABLED_NODES
}:
  z[r,c,d1,d2] >= y[r - DR[d1], c - DC[d1], d1] + y[r,c,d2] - 1;

subject to no_self_loops {r in ROWS, c in COLS}:
  x[r,c,r,c] = 0;

subject to no_corner_cutting {
  r in ROWS, c in COLS, nr in ROWS, nc in COLS :
    abs(r - nr) = 1 and abs(c - nc) = 1
    and (r,nc) in DISABLED_NODES or (nr,c) in DISABLED_NODES
}:
  x[r,c,nr,nc] = 0;

subject to prevent_reuse {(r,c) in NODES}:
    (USED_NODES[r,c] = 1 and not (r = start[1] and c = start[2]) and not (r = finish[1] and c = finish[2])) ==> 
        sum{nr in ROWS, nc in COLS} (x[r,c,nr,nc] + x[nr,nc,r,c]) = 0;

problem dka: x, y, z, total_cost, flow_balance, disable_illegal_arcs, define_y_from_x, define_z_turns, no_self_loops, no_corner_cutting;
problem dkb: x, y, z, total_cost, flow_balance, disable_illegal_arcs, define_y_from_x, define_z_turns, no_self_loops, no_corner_cutting, prevent_reuse;

data;

param rows := {{ width }};
param cols := {{ height }};

param start :=
1 {{ start_x }}
2 {{ start_y }};

param finish :=
1 {{ end_x }}
2 {{ end_y }};

set DISABLED_NODES :=
{{ disabled_nodes }};


param DR :=
1 -1
2 0
3 1
4 1
5 1
6 0
7 -1
8 -1;

param DC :=
1 1
2 1
3 1
4 0
5 -1
6 -1
7 -1
8 0;

solve dka;

printf "\n--- Path 1 ---\n";
for {r in ROWS, c in COLS, nr in ROWS, nc in COLS: x[r,c,nr,nc] > 0.5} {
    printf "  (%d,%d) -> (%d,%d)\n", r, c, nr, nc;
    let USED_NODES[r,c] := 1;
    let USED_NODES[nr,nc] := 1;
}

let ks := 1;

for {k in 2..Ns} {
    solve dkb;

    if (solve_result != "solved") then {
        printf "No more disjoint paths found at step %d\n", k;
        break;
    }

    printf "\n--- Path %d ---\n", k;

    let found := 0;
    for {r in ROWS, c in COLS, nr in ROWS, nc in COLS: x[r,c,nr,nc] > 0.5} {
        printf "  (%d,%d) -> (%d,%d)\n", r, c, nr, nc;
        let USED_NODES[r,c] := 1;
        let USED_NODES[nr,nc] := 1;
        let found := 1;
    }

    if found = 0 then break;

    let ks := ks + 1;
}

printf "\nTotal paths found: %d\n", ks;
display _total_solve_time;