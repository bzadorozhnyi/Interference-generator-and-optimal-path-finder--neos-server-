param rows integer > 0;
param cols integer > 0;

set ROWS := 1..rows;
set COLS := 1..cols;

set NODES := {ROWS, COLS};

param start{1..2} integer;
param finish{1..2} integer;

var x{r in ROWS, c in COLS, nr in ROWS, nc in COLS} binary;

minimize total_distance:
    sum{r in ROWS, c in COLS,
        (nr,nc) in {(r+1,c), (r-1,c), (r,c+1), (r,c-1)}:
        nr >= 1 and nr <= rows and nc >= 1 and nc <= cols}
        x[r,c,nr,nc];

subject to flow_balance {r in ROWS, c in COLS}:
    sum{(nr,nc) in {(r+1,c),(r-1,c),(r,c+1),(r,c-1)}:
        nr >= 1 and nr <= rows and nc >= 1 and nc <= cols}
        (x[r,c,nr,nc] - x[nr,nc,r,c])
    =
    if (r = start[1] and c = start[2]) then 1
    else if (r = finish[1] and c = finish[2]) then -1
    else 0;

data;

param rows := {{ size }};
param cols := {{ size }};

param start :=
1 {{ start_x }}
2 {{ start_y }};

param finish :=
1 {{ end_x }}
2 {{ end_y }};

solve;

printf "\nShortest Path from (%d,%d) to (%d,%d):\n", 
    start[1], start[2], finish[1], finish[2];

for {r in ROWS, c in COLS, nr in ROWS, nc in COLS:
        x[r,c,nr,nc] > 0.5} {
    printf "  (%d,%d) -> (%d,%d)\n", r, c, nr, nc;
}