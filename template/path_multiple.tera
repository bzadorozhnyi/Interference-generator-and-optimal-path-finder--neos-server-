param rows integer > 0;
param cols integer > 0;

set ROWS := 1..rows;
set COLS := 1..cols;

set NODES := {ROWS, COLS};
set DISABLED_NODES within NODES default {};

param start{1..2} integer;
param finish{1..2} integer;

var x{r in ROWS, c in COLS, nr in ROWS, nc in COLS} binary;

param found;
param USED_NODES {NODES} binary default 0;
param ks default 1;
param Ns default 10;

minimize total_distance:
    sum{r in ROWS, c in COLS,
        (nr,nc) in {(r+1,c), (r-1,c), (r,c+1), (r,c-1),
                    (r+1,c+1), (r+1,c-1), (r-1,c+1), (r-1,c-1)}:
        nr >= 1 and nr <= rows and nc >= 1 and nc <= cols
        and (r,c) not in DISABLED_NODES and (nr,nc) not in DISABLED_NODES}
        x[r,c,nr,nc];

subject to flow_balance {r in ROWS, c in COLS: (r,c) not in DISABLED_NODES}:
    sum{(nr,nc) in {(r+1,c),(r-1,c),(r,c+1),(r,c-1),
                    (r+1,c+1),(r+1,c-1),(r-1,c+1),(r-1,c-1)}:
        nr >= 1 and nr <= rows and nc >= 1 and nc <= cols}
        (x[r,c,nr,nc] - x[nr,nc,r,c])
    =
    if (r = start[1] and c = start[2]) then 1
    else if (r = finish[1] and c = finish[2]) then -1
    else 0;

subject to disable_nodes {(r,c) in DISABLED_NODES, nr in ROWS, nc in COLS}:
    x[r,c,nr,nc] = 0;

subject to disable_nodes_reverse {(r,c) in DISABLED_NODES, nr in ROWS, nc in COLS}:
    x[nr,nc,r,c] = 0;

# Prevent reuse of intermediate nodes (not start or finish)
subject to prevent_reuse {(r,c) in NODES}:
    (USED_NODES[r,c] = 1 and not (r = start[1] and c = start[2]) and not (r = finish[1] and c = finish[2])) ==> sum{nr in ROWS, nc in COLS} (x[r,c,nr,nc] + x[nr,nc,r,c]) = 0;

problem dka: x, total_distance, flow_balance, disable_nodes, disable_nodes_reverse;
problem dkb: x, total_distance, flow_balance, disable_nodes, disable_nodes_reverse, prevent_reuse;

data;

param rows := {{ size }};
param cols := {{ size }};

param start :=
1 {{ start_x }}
2 {{ start_y }};

param finish :=
1 {{ end_x }}
2 {{ end_y }};

set DISABLED_NODES :=
{{ disabled_nodes }};

# Initial solve
solve dka;

printf "\n--- Path 1 ---\n";
for {r in ROWS, c in COLS, nr in ROWS, nc in COLS: x[r,c,nr,nc] > 0.5} {
    printf "  (%d,%d) -> (%d,%d)\n", r, c, nr, nc;
    let USED_NODES[r,c] := 1;
    let USED_NODES[nr,nc] := 1;
}

let ks := 1;

# Loop to find additional paths
for {k in 2..Ns} {
    solve dkb;

    if (solve_result != "solved") then {
        printf "No more disjoint paths found at step %d\n", k;
        break;
    }

    printf "\n--- Path %d ---\n", k;

    let found := 0;
    for {r in ROWS, c in COLS, nr in ROWS, nc in COLS: x[r,c,nr,nc] > 0.5} {
        printf "  (%d,%d) -> (%d,%d)\n", r, c, nr, nc;
        let USED_NODES[r,c] := 1;
        let USED_NODES[nr,nc] := 1;
        let found := 1;
    }

    if found = 0 then break;

    let ks := ks + 1;
}

printf "\nTotal paths found: %d\n", ks;
display _total_solve_time;